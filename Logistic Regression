import os
import zipfile
from PIL import Image
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# --- 1. Descomprimir el archivo ZIP ---
zip_path = 'Data.zip' 

if os.path.exists(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall('shapes_data')
    print("Archivo ZIP descomprimido exitosamente.")
else:
    print("Error: Asegúrate de haber subido el archivo 'Data.zip'.")

# --- 2. Función para cargar y procesar las imágenes ---
def load_and_process_images(folder_path, image_size=(64, 64)):
    images = []
    for filename in os.listdir(folder_path):
        try:
            img_path = os.path.join(folder_path, filename)
            img = Image.open(img_path).convert('L').resize(image_size)
            images.append(np.array(img).flatten())
        except Exception as e:
            print(f"No se pudo procesar el archivo {filename}: {e}")
    return images

# --- 3. Cargar los datos de entrenamiento ---
base_dir = 'shapes_data/Data' 

class1_dir = os.path.join(base_dir, 'class1')
class2_dir = os.path.join(base_dir, 'class2')

# Verificar si las rutas existen antes de continuar
if not os.path.isdir(base_dir):
    print(f"¡Error Crítico! El directorio base '{base_dir}' no existe. Revisa el contenido de tu archivo ZIP.")
else:
    class1_images = load_and_process_images(class1_dir)
    class2_images = load_and_process_images(class2_dir)

    class1_labels = [0] * len(class1_images)
    class2_labels = [1] * len(class2_images)

    X = np.array(class1_images + class2_images)
    y = np.array(class1_labels + class2_labels)
    X = X / 255.0

    print(f"\nSe cargaron {len(X)} imágenes en total.")
    print(f"Dimensiones de los datos (imágenes, píxeles): {X.shape}")

    # --- 4. Entrenar el modelo de Regresión Logística ---
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LogisticRegression(max_iter=1000)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"\nEl modelo fue entrenado con una precisión del {accuracy * 100:.2f}% en los datos de prueba.")

    # --- 5. Probar el modelo con la imagen "test" ---
    test_image_path = os.path.join(base_dir, 'test.png')

    if os.path.exists(test_image_path):
        test_img = Image.open(test_image_path).convert('L').resize((64, 64))
        test_img_vector = np.array(test_img).flatten().reshape(1, -1) / 255.0
        prediction = model.predict(test_img_vector)

        print("\n--- RESULTADO DE LA PREDICCIÓN ---")
        if prediction[0] == 0:
            print("La imagen 'test.jpg' se clasifica como: **class1** (Círculo).")
        else:
            print("La imagen 'test.jpg' se clasifica como: **class2** (No Círculo).")
        print("-----------------------------------")
    else:
        print(f"\nError: No se encontró la imagen 'test' en la ruta: {test_image_path}")
